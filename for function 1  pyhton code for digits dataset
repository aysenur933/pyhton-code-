import numpy as np
from sklearn import svm, datasets
from sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score, roc_auc_score
from sklearn.model_selection import train_test_split

def my_kernel(X, Y):
    D = np.zeros((X.shape[0], Y.shape[0]))
    for i, x in enumerate(X):
        for j, y in enumerate(Y):
            D[i, j] = np.exp(-gamma * np.linalg.norm(x - y) ** beta)
    return D

# import some data to play with
wine = datasets.load_digits()
X = wine.data
Y = wine.target

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)


# Bu kısım default SVM örneği ile elde edilen sonuçlar
model_1 = svm.SVC(kernel="rbf",gamma=1,probability=True)
model_1.fit(X_train, y_train)
y_pred = model_1.predict(X_test)
F1 = f1_score(y_test, y_pred, average='macro')
ACC = accuracy_score(y_test, y_pred)
Precision = precision_score(y_test, y_pred, average='macro')
Recall = recall_score(y_test, y_pred, average='macro')
Roc_auc_Score = roc_auc_score(y_test, model_1.predict_proba(X_test), average='macro', multi_class="ovr")
sonucSVMDefault= {'ACC': ACC, 'F1': F1, 'Precision': Precision, 'Recall': Recall, "Roc_auc_Score": Roc_auc_Score}


# Bu kısım bizim kendi kernelimiz ile elde edilen sonuçlar
gamma=1
beta=1
model_2 = svm.SVC(kernel=my_kernel, probability=True)
model_2.fit(X_train, y_train)
y_pred = model_2.predict(X_test)
F1 = f1_score(y_test, y_pred, average='macro')
ACC = accuracy_score(y_test, y_pred)
Precision = precision_score(y_test, y_pred, average='macro')
Recall = recall_score(y_test, y_pred, average='macro')
Roc_auc_Score = roc_auc_score(y_test, model_2.predict_proba(X_test), average='macro', multi_class="ovr")
sonucSVMCustomKernel= {'ACC': ACC, 'F1': F1, 'Precision': Precision, 'Recall': Recall, "Roc_auc_Score": Roc_auc_Score}

print("Default SVM sonuçları")
print(sonucSVMDefault)
print("--------------------")
print("CustomKernel SVM sonuçları")
print(sonucSVMCustomKernel)
